from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from meetapp.models import User

from .scene_router import SceneRouter


class MainMenuScene:
    def handle(self, update, context):
        context.user_data['scene'] = self
        keyboard = [
            [
                InlineKeyboardButton(
                    'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    callback_data='schedule'
                ),
                InlineKeyboardButton(
                    'ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
                    callback_data='network'
                )
            ],
            [
                InlineKeyboardButton(
                    '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É',
                    callback_data='ask'
                ),
                InlineKeyboardButton(
                    'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤',
                    callback_data='donate'
                )
            ]
        ]
        user_id = update.effective_user.id
        is_speaker = User.objects.filter(tg_id=user_id, role='speaker').exists()
        if is_speaker:
            keyboard.append([InlineKeyboardButton(
                'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
                callback_data='show_questions'
            )])
        markup = InlineKeyboardMarkup(keyboard)
        message = update.message or update.callback_query.message
        message.reply_text(
            'üéÆ –ú–µ–Ω—é –±–æ—Ç–∞',
            reply_markup=markup
        )

    def process_callback(self, update, context):
        query = update.callback_query
        if query.data == 'schedule':
            scene = SceneRouter.get('schedule')
            query.answer()
            query.message.delete()
            scene.handle(update, context)
        if query.data == 'network':
            scene = SceneRouter.get('connection')
            query.answer()
            query.message.delete()
            scene.handle(update, context)
        if query.data == 'ask':
            scene = SceneRouter.get('ask_question')
            query.answer()
            query.message.delete()
            scene.handle(update, context)
        if query.data == 'donate':
            scene = SceneRouter.get('donate')
            query.answer()
            query.message.delete()
            scene.handle(update, context)
