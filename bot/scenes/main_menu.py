from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from meetapp.models import User

from .scene_router import SceneRouter


class MainMenuScene:
    def handle(self, update, context):
        context.user_data['scene'] = self
        keyboard = [
            [
                InlineKeyboardButton(
                    'üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    callback_data='schedule'
                ),
                InlineKeyboardButton(
                    'ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞',
                    callback_data='network'
                )
            ],
            [
                InlineKeyboardButton(
                    '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É',
                    callback_data='ask'
                ),
                InlineKeyboardButton(
                    'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤',
                    callback_data='donate'
                )
            ],
            [
                InlineKeyboardButton(
                    '–°—Ç–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–º',
                    callback_data='application'
                )
            ]
        ]
        user_id = update.effective_user.id
        user = User.objects.filter(tg_id=user_id).first()

        is_speaker = User.objects.filter(tg_id=user_id, role='speaker').exists()
        if is_speaker:
            keyboard.append([InlineKeyboardButton(
                'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
                callback_data='show_questions'
            )])

        if user and user.is_subscribed:
            keyboard.append([InlineKeyboardButton(
                'üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', 
                callback_data='unsubscribe'
            )])
        elif user:
            keyboard.append([InlineKeyboardButton(
                'üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 
                callback_data='subscribe'
            )])

        if user.is_admin:
            keyboard.append([InlineKeyboardButton(
                'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 
                callback_data='broadcast'
            )])

        markup = InlineKeyboardMarkup(keyboard)
        message = update.message or update.callback_query.message
        message.reply_text(
            'üéÆ –ú–µ–Ω—é –±–æ—Ç–∞',
            reply_markup=markup
        )

    def process_callback(self, update, context):
        query = update.callback_query
        query.answer()

        if query.data == 'schedule':
            scene = SceneRouter.get('schedule')
            query.answer()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'network':
            scene = SceneRouter.get('connection')
            query.answer()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'ask':
            scene = SceneRouter.get('ask_question')
            query.answer()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'donate':
            scene = SceneRouter.get('donate')
            query.answer()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'show_questions':
            scene = SceneRouter.get('speaker_view')
            query.answer()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'subscribe':
            from .subscription import SubscriptionScene
            scene = SubscriptionScene()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'broadcast':
            from .broadcast import BroadcastScene
            scene = BroadcastScene()
            query.message.delete()
            scene.handle(update, context)

        if query.data == 'unsubscribe':
            from .unsubscribe import UnsubscribeScene
            scene = UnsubscribeScene()

        if query.data == 'application':
            scene = SceneRouter.get('create_application')
            query.answer()
            query.message.delete()
            scene.handle(update, context)
