from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from django.db.models import Q
from django.db import DataError
from django.core.exceptions import ValidationError
from meetapp.models import User

from .scene_router import SceneRouter


class ConnectionScene:
    def handle(self, update, context):
        context.user_data['scene'] = self
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)
        if user.about_me:
            context.user_data['stage'] = 'random_person'
            self.process(update, context)
        else:
            cancel_markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    '‚ùå –û—Ç–º–µ–Ω–∞',
                    callback_data='decline_about'
                )]
            ])
            context.user_data['stage'] = 'about_me'
            message = update.message or update.callback_query.message
            message.reply_text(
                '‚úçÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –æ —Å–µ–±–µ.\n' \
                'üëÄ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                reply_markup=cancel_markup
            )

    def process(self, update, context):
        stage = context.user_data['stage']
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)

        if stage == 'about_me':
            text = update.message.text
            context.user_data['stage'] = 'confirm_about'
            context.user_data['about_me_text'] = text

            markup = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                    callback_data='confirm_about'
                )],
                [InlineKeyboardButton(
                    '‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å',
                    callback_data='decline_about'
                )]
            ])
            update.message.reply_text('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç—É?', reply_markup=markup)

        elif stage == 'random_person':
            nav_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                        callback_data='skip_person'
                    ),
                    InlineKeyboardButton(
                        '‚è™ –ù–∞–∑–∞–¥',
                        callback_data='back_to_menu'
                    )
                ]
            ])

            random_user = (
                User.objects
                .filter(~Q(tg_id=user.tg_id), ~Q(about_me=''))
                .order_by('?')
                .first()
            )
            msg = update.message or update.callback_query.message

            if random_user:
                username = (
                    f"@{random_user.username}"
                    if random_user.username
                    else "‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω"
                )
                text = (
                    f"ü§ù *–í–æ—Ç –∫—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π:*\n\n"
                    f"{username}\n"
                    f"*–ò–º—è:* {random_user.first_name}\n\n"
                    f"*–û —Å–µ–±–µ:*\n_{random_user.about_me}_"
                )
                msg.reply_text(
                    text,
                    reply_markup=nav_markup, 
                    parse_mode='Markdown'
                )
                context.user_data['stage'] = 'person_found'
            else:
                msg.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π :(")
                SceneRouter.get('main_menu').handle(update, context)

    def process_callback(self, update, context):
        query = update.callback_query
        data = query.data
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)
        main = SceneRouter.get('main_menu')

        if data == 'about_cancel':
            query.answer()
            query.message.delete()
            return main.handle(update, context)

        if data == 'confirm_about':
            about = context.user_data.get('about_me_text')
            if about:
                max_len = user._meta.get_field('about_me').max_length
                if len(about) > max_len:
                    query.answer(
                        text=f'–ú–∞–∫—Å–∏–º—É–º {max_len} —Å–∏–º–≤–æ–ª–æ–≤. –°–µ–π—á–∞—Å {len(about)}.',
                        show_alert=True
                    )
                    return
                try:
                    user.about_me = about
                    user.save()
                except (ValidationError, DataError):
                    query.answer(
                        text='–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üòï\n'
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–æ—Ä–æ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.',
                        show_alert=True
                    )
                    return
                context.user_data['stage'] = 'random_person'
                query.answer()
                query.edit_message_reply_markup(reply_markup=None)
                query.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! ü§ù')
                self.process(update, context)
            else:
                context.user_data['stage'] = 'about_me'
                query.answer()
                query.message.reply_text(
                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
                )

        elif data == 'decline_about':
            context.user_data['stage'] = 'about_me'
            query.answer()
            query.edit_message_reply_markup(reply_markup=None)
            query.message.reply_text('‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')

        elif data == 'skip_person':
            query.answer()
            query.message.delete()
            context.user_data['stage'] = 'random_person'
            self.process(update, context)

        elif data == 'back_to_menu':
            query.answer()
            query.message.delete()
            main.handle(update, context)
