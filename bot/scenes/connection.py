from telegram import (
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from django.db.models import Q
from meetapp.models import User

from .scene_router import SceneRouter


class ConnectionScene:
    def handle(self, update, context):
        context.user_data['scene'] = self
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)
        if user.about_me:
            context.user_data['stage'] = 'random_person'
            self.process(update, context)
        else:
            keyboard_cancel = [
                ['‚ùå –û—Ç–º–µ–Ω–∞']
            ]
            cancel_markup = ReplyKeyboardMarkup(keyboard_cancel)
            context.user_data['stage'] = 'about_me'
            message = update.message or update.callback_query.message
            message.reply_text(
                '‚úçÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –æ —Å–µ–±–µ.\n' \
                'üëÄ –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
                reply_markup=cancel_markup
            )

    def process(self, update, context):
        stage = context.user_data['stage']
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)
        if stage == 'about_me':
            text = update.message.text
            if text == '‚ùå –û—Ç–º–µ–Ω–∞':
                scene = SceneRouter.get('main_menu')
                scene.handle(update, context)
            else:
                context.user_data['stage'] = 'confirm_about'
                context.user_data['about_me_text'] = text
                keyboard = [
                    [InlineKeyboardButton(
                        '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                        callback_data='confirm_about'
                    )],
                    [InlineKeyboardButton(
                        '–ò–∑–º–µ–Ω–∏—Ç—å',
                        callback_data='decline_about'
                    )]
                ]
                markup = InlineKeyboardMarkup(keyboard)

                update.message.reply_text(
                    '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏ –∞–Ω–∫–µ—Ç—É?',
                    reply_markup=markup
                )

        elif stage == 'random_person':
            keyboard = [
                ['‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'],
                ['‚è™ –ù–∞–∑–∞–¥']
            ]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            random_user = (
                User.objects
                .filter(~Q(tg_id=user.tg_id), ~Q(about_me=''))
                .order_by('?')
                .first()
            )
            message = update.message or update.callback_query.message
            if random_user:
                username = (
                    f"@{random_user.username}"
                    if random_user.username
                    else "‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω"
                )

                text = (
                    f"ü§ù *–í–æ—Ç –∫—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π:*\n\n"
                    f"{username}\n"
                    f"*–ò–º—è:* {random_user.first_name}\n\n"
                    f"*–û —Å–µ–±–µ:*\n_{random_user.about_me}_"
                )
                message.reply_text(
                    text,
                    reply_markup=markup,
                    parse_mode='Markdown'
                )
                context.user_data['stage'] = 'person_found'
            else:
                message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª—é–¥–µ–π :(")
                scene = SceneRouter.get('main_menu')
                scene.handle(update, context)

        elif stage == 'person_found':
            text = update.message.text
            if text == '‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                context.user_data['stage'] = 'random_person'
                self.process(update, context)
            elif text == '‚è™ –ù–∞–∑–∞–¥':
                scene = SceneRouter.get('main_menu')
                scene.handle(update, context)

    def process_callback(self, update, context):
        query = update.callback_query
        tg_id = update.effective_user.id
        user = User.objects.get(tg_id=tg_id)
        if query.data == 'confirm_about':
            about_me_text = context.user_data.get('about_me_text')
            if about_me_text:
                user.about_me = about_me_text
                user.save()
                context.user_data['stage'] = 'random_person'
                query.answer()
                query.edit_message_reply_markup(reply_markup=None)
                query.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ! ü§ù')
                self.handle(update, context)
            else:
                context.user_data['stage'] = 'about_me'
                query.answer()
                query.message.reply_text(
                    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞.'
                )

        elif query.data == 'decline_about':
            context.user_data['stage'] = 'about_me'
            query.answer()
            query.edit_message_reply_markup(reply_markup=None)
            query.message.reply_text('‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ')
